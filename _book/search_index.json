[
["biased-transmission-indirect-bias-model.html", "4 Biased transmission (indirect bias: model) 4.1 A simple model bias", " 4 Biased transmission (indirect bias: model) In the two previous chapters, we started to examine biased transmission, both based on the characteristics of the traits (or direct bias) and on the characteristics of the population. The latter can result from taking into account the frequency of a trait (as we did for conformity) or from taking into account specific features of the demonstrators, or model bias, which we will look at in this chapter. Whereas the simulations we realised previously are fairly standard, indirect, model-based, biased transmission can be implemented in several different ways. Model biases can result when individuals copy preferentially from any features of the demonstrators, as long as it is not directly tied to the traits. The most studied model bias is prestige bias, where individuals are more likely to copy from demonstrators that are considered more ‘prestigious’, for example because other individuals show deference to them. Alternatively, individuals can copy the demonstrators that are more successful, independently from how others judge them, or they can copy individuals that are more similar to them, or older (or younger), and so on. The crux is that the decision is not directly linked to the cultural trait itself. 4.1 A simple model bias To implement a simple version of model-biased cultural transmission, we first need to assume that there are some intrinsic differences in the population. Up until now, our populations were described only by the traits they possessed. We now want that individuals have a feature by which some of them can be distinguished from others, and, as a consequence, being more liked to be copied. We can call this feature ‘status’. An individual’s status is a binary variable that could stand for whether they are prestigious or not, old (young) or not (assuming that the time frame of the simulations is sufficienlty short) or any other features that do not change, and that other individuals can use to decide whether to copy from them or not. We can have a parameter \\(p_s\\), that determines the probability an individual have an high or a low status. library(tidyverse) set.seed(111) N &lt;- 100 p_0 &lt;- 0.5 p_s &lt;- 0.05 population &lt;- tibble(trait = sample(c(&quot;A&quot;, &quot;B&quot;), N, replace = TRUE, prob = c(p_0, 1 - p_0)), status = sample(c(&quot;high&quot;, &quot;low&quot;), N, replace = TRUE, prob = c(p_s, 1 - p_s))) We can inspect the tibble by typing its name in the R console population ## # A tibble: 100 x 2 ## trait status ## &lt;chr&gt; &lt;chr&gt; ## 1 A low ## 2 A low ## 3 B low ## 4 A low ## 5 B low ## 6 B low ## 7 B low ## 8 A low ## 9 B low ## 10 B high ## # … with 90 more rows With \\(p_s=0.05\\) around 5 individuals in a population of 100 will have high status. In this specific case, one of them is individual 10, so it will be one of the individuals that will be likely to be copied more from. How should the status used to decide whether to copy or not? Again, there are various possibilities. An intuitive way is to assume that the probabilities to pick high-status and low-status individuals as demonstrators are different. So far, when using the function sample to select demonstrators, we did not include any specific probability, so that each individual of the previous generation had the same likelihood to be selected. However, we can pass to the function a vector of probabilites to weight the choice. We can assume that the probability to select high status individuals as demonstrators is always equal to 1 (as in unbiased transmission), but the probability to select low-status individuals is encoded by a further parameter, \\(p_\\text{low}\\): when \\(p_\\text{low}=1\\), the simulations correspond to unbiased transmission, as everybody has the same probability to be chosen, while with \\(p_\\text{low}=0\\), there is a strict model bias, where only high-status individuals are copied. To implement this, we first store in p_demonstrator the probabilities to be copied for each member of the population: p_low &lt;- 0.01 p_demonstrator &lt;- rep(1,N) p_demonstrator[population$status == &quot;low&quot;] &lt;- p_low After that, we sample the traits in the population using these probabilities. Notice the instruction if(sum(p_demonstrator) &gt; 0): this is necessary in the case in which there are not high-status individuals and the probability to select demonstrators from low-status one is equal to 0. In this case, the total probability would be also equal to 0, and it would generate an error when the function is run. With this instruction, instead, no copying happens, which is what we would expect in this situation. if(sum(p_demonstrator) &gt; 0){ demonstrator_index &lt;- sample (N, prob = p_demonstrator, replace = TRUE) population$trait &lt;- population$trait[demonstrator_index] } As usual, we can wrap everything in a function. biased_transmission_model &lt;- function(N, p_0, p_s, p_low, t_max, r_max) { output &lt;- tibble(generation = rep(1:t_max, r_max), p = rep(NA, t_max * r_max), run = as.factor(rep(1:r_max, each = t_max))) for (r in 1:r_max) { population &lt;- tibble(trait = sample(c(&quot;A&quot;, &quot;B&quot;), N, replace = TRUE, prob = c(p_0, 1 - p_0)), status = sample(c(&quot;high&quot;, &quot;low&quot;), N, replace = TRUE, prob = c(p_s, 1 - p_s))) output[output$generation == 1 &amp; output$run == r, ]$p &lt;- sum(population$trait == &quot;A&quot;) / N # add first generation&#39;s p for run r for (t in 2:t_max) { p_demonstrator &lt;- rep(1,N) p_demonstrator[population$status == &quot;low&quot;] &lt;- p_low if(sum(p_demonstrator) &gt; 0){ demonstrator_index &lt;- sample (N, prob = p_demonstrator, replace = TRUE) population$trait &lt;- population$trait[demonstrator_index] } output[output$generation == t &amp; output$run == r, ]$p &lt;- sum(population$trait == &quot;A&quot;) / N # get p and put it into output slot for this generation t and run r } } output # export data from function } We can now test our simulation, assuming a very low, but not null, probability to select low-status individuals as demonstrators (remember we are using the habitual plot_multiple_runs() function to plot the results of the simulations). data_model &lt;- biased_transmission_model(N = 100, p_s = 0.05, p_low=0.0001, p_0 = 0.5, t_max = 200, r_max = 5) plot_multiple_runs(data_model) data_model &lt;- biased_transmission_model(N = 1000, p_s = 0.05, p_low=0.0001, p_0 = 0.5, t_max = 200, r_max = 5) plot_multiple_runs(data_model) "]
]
